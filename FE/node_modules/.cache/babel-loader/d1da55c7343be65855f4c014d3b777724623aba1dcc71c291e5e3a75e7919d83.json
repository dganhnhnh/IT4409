{"ast":null,"code":"import { logger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\nimport { persistStore } from 'redux-persist';\nimport createRootReducer from './store/reducers/rootReducer';\nimport actionTypes from './store/actions/actionTypes';\nconst environment = process.env.NODE_ENV || \"development\";\nlet isDevelopment = environment === \"development\";\n\n// Hide redux logs in production\nisDevelopment = false;\nconst reduxStateSyncConfig = {\n  whitelist: [actionTypes.APP_START_UP_COMPLETE]\n};\nconst rootReducer = createRootReducer(); // Không cần truyền history\nconst middleware = [thunkMiddleware, createStateSyncMiddleware(reduxStateSyncConfig)];\nif (isDevelopment) middleware.push(logger);\nconst composeEnhancers = isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\nconst reduxStore = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\nexport const dispatch = reduxStore.dispatch;\nexport const persistor = persistStore(reduxStore);\nexport default reduxStore;","map":{"version":3,"names":["logger","thunkMiddleware","createStore","applyMiddleware","compose","createStateSyncMiddleware","persistStore","createRootReducer","actionTypes","environment","process","env","NODE_ENV","isDevelopment","reduxStateSyncConfig","whitelist","APP_START_UP_COMPLETE","rootReducer","middleware","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reduxStore","dispatch","persistor"],"sources":["D:/web/BTL/IT4409/FE/src/redux.js"],"sourcesContent":["import { logger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { createStateSyncMiddleware } from 'redux-state-sync';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport createRootReducer from './store/reducers/rootReducer';\r\nimport actionTypes from './store/actions/actionTypes';\r\n\r\nconst environment = process.env.NODE_ENV || \"development\";\r\nlet isDevelopment = environment === \"development\";\r\n\r\n// Hide redux logs in production\r\nisDevelopment = false;\r\n\r\nconst reduxStateSyncConfig = {\r\n    whitelist: [\r\n        actionTypes.APP_START_UP_COMPLETE,\r\n    ]\r\n};\r\n\r\nconst rootReducer = createRootReducer(); // Không cần truyền history\r\nconst middleware = [\r\n    thunkMiddleware,\r\n    createStateSyncMiddleware(reduxStateSyncConfig),\r\n];\r\nif (isDevelopment) middleware.push(logger);\r\n\r\nconst composeEnhancers = (isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) \r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ \r\n    : compose;\r\n\r\nconst reduxStore = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware)),\r\n);\r\n\r\nexport const dispatch = reduxStore.dispatch;\r\nexport const persistor = persistStore(reduxStore);\r\n\r\nexport default reduxStore;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;AACrC,OAAOC,eAAe,MAAM,aAAa;AACzC,SAASC,WAAW,EAAEC,eAAe,EAAEC,OAAO,QAAQ,OAAO;AAC7D,SAASC,yBAAyB,QAAQ,kBAAkB;AAC5D,SAASC,YAAY,QAAQ,eAAe;AAE5C,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,WAAW,MAAM,6BAA6B;AAErD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI,aAAa;AACzD,IAAIC,aAAa,GAAGJ,WAAW,KAAK,aAAa;;AAEjD;AACAI,aAAa,GAAG,KAAK;AAErB,MAAMC,oBAAoB,GAAG;EACzBC,SAAS,EAAE,CACPP,WAAW,CAACQ,qBAAqB;AAEzC,CAAC;AAED,MAAMC,WAAW,GAAGV,iBAAiB,CAAC,CAAC,CAAC,CAAC;AACzC,MAAMW,UAAU,GAAG,CACfjB,eAAe,EACfI,yBAAyB,CAACS,oBAAoB,CAAC,CAClD;AACD,IAAID,aAAa,EAAEK,UAAU,CAACC,IAAI,CAACnB,MAAM,CAAC;AAE1C,MAAMoB,gBAAgB,GAAIP,aAAa,IAAIQ,MAAM,CAACC,oCAAoC,GAChFD,MAAM,CAACC,oCAAoC,GAC3ClB,OAAO;AAEb,MAAMmB,UAAU,GAAGrB,WAAW,CAC1Be,WAAW,EACXG,gBAAgB,CAACjB,eAAe,CAAC,GAAGe,UAAU,CAAC,CACnD,CAAC;AAED,OAAO,MAAMM,QAAQ,GAAGD,UAAU,CAACC,QAAQ;AAC3C,OAAO,MAAMC,SAAS,GAAGnB,YAAY,CAACiB,UAAU,CAAC;AAEjD,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}